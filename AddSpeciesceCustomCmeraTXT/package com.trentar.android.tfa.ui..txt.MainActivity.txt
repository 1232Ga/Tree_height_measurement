package com.trentar.android.tfa.ui.activity

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.content.pm.PackageManager
import android.os.AsyncTask
import android.os.Build
import android.os.Bundle
import android.util.Log
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.trentar.android.tfa.databinding.ActivityMainBinding
import com.trentar.android.tfa.utils.BaseClass
import com.trentar.android.tfa.utils.FPVDemoApplication
import dji.common.error.DJIError
import dji.common.error.DJISDKError
import dji.log.DJILog
import dji.sdk.base.BaseComponent
import dji.sdk.base.BaseProduct
import dji.sdk.base.BaseProduct.ComponentKey
import dji.sdk.products.Aircraft
import dji.sdk.sdkmanager.DJISDKInitEvent
import dji.sdk.sdkmanager.DJISDKManager
import dji.sdk.sdkmanager.DJISDKManager.SDKManagerCallback
import java.util.concurrent.atomic.AtomicBoolean

class MainActivity : BaseClass() {
   private lateinit var binding: ActivityMainBinding
    private val missingPermission: MutableList<String> = ArrayList()
    private val isRegistrationInProgress = AtomicBoolean(false)
    private val REQUEST_PERMISSION_CODE: Int = 12345

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        fullScreen()
        checkAndRequestPermissions()
        binding=ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)
        // Register the broadcast receiver for receiving the device connection's changes.

        val filter = IntentFilter()
        filter.addAction(FPVDemoApplication.FLAG_CONNECTION_CHANGE)
        registerReceiver(mReceiver, filter, RECEIVER_EXPORTED)
    }
    override fun onDestroy() {
        unregisterReceiver(mReceiver)
        super.onDestroy()
    }

    private fun checkAndRequestPermissions() {
        for (eachPermission in REQUIRED_PERMISSION_LIST) {
            if (ContextCompat.checkSelfPermission(this, eachPermission) != PackageManager.PERMISSION_GRANTED) {
                missingPermission.add(eachPermission)
            }
        }
        if(missingPermission.isEmpty()){
            startSDKRegistration()
        }
       else if (!missingPermission.isEmpty() && Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            ActivityCompat.requestPermissions(this, missingPermission.toTypedArray<String>(), REQUEST_PERMISSION_CODE)
        }
    }
    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<String?>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        // Check for granted permission and remove from missing list
        if (requestCode == REQUEST_PERMISSION_CODE) {
            for (i in grantResults.indices.reversed()) {
                if (grantResults[i] == PackageManager.PERMISSION_GRANTED) {
                    missingPermission.remove(permissions[i])
                }
            }
        }

        if (missingPermission.isEmpty()) {
            startSDKRegistration()
        } else {
            showToast("Missing permissions!!!")
        }
    }
    private fun startSDKRegistration() {
        if (isRegistrationInProgress.compareAndSet(false, true)) {
            AsyncTask.execute {
                DJISDKManager.getInstance().registerApp(applicationContext, object : SDKManagerCallback {
                        override fun onRegister(djiError: DJIError) {
                            if (djiError === DJISDKError.REGISTRATION_SUCCESS) {
                                DJILog.e("App registration", DJISDKError.REGISTRATION_SUCCESS.description)
                                DJISDKManager.getInstance().startConnectionToProduct()
                                showToast("Register Success")
                            } else {
                                showToast("Register sdk fails, check network is available")
                            }
                            Log.v("Main", djiError.description)
                        }
                        override fun onProductDisconnect() {
                            Log.d("Main", "onProductDisconnect")
                            showToast("Product Disconnected")
                        }
                        override fun onProductConnect(baseProduct: BaseProduct) {
                            Log.d("MainValue", String.format("onProductConnect newProduct:%s", baseProduct))
                            showToast("Product Connected")
                        }
                        override fun onProductChanged(baseProduct: BaseProduct) {
                            showToast("Product Change Connected")
                        }

                        override fun onComponentChange(
                            componentKey: ComponentKey, oldComponent: BaseComponent,
                            newComponent: BaseComponent
                        ) {
                            if (newComponent != null) {
                                newComponent.setComponentListener { isConnected ->
                                    Log.d(
                                        "Main",
                                        "onComponentConnectivityChanged: $isConnected"
                                    )
                                }
                            }
                            Log.d(
"Main",
                                String.format(
                                    "onComponentChange key:%s, oldComponent:%s, newComponent:%s",
                                    componentKey,
                                    oldComponent,
                                    newComponent
                                )
                            )
                        }

                        override fun onInitProcess(djisdkInitEvent: DJISDKInitEvent, i: Int) {
                        }

                        override fun onDatabaseDownloadProgress(l: Long, l1: Long) {
                        }
                    })
            }
        }
    }

    protected var mReceiver: BroadcastReceiver = object : BroadcastReceiver() {
        override fun onReceive(context: Context, intent: Intent) {
            refreshSDKRelativeUI()
        }
    }
    private fun refreshSDKRelativeUI() {
        val mProduct: BaseProduct = FPVDemoApplication.getProductInstance()

        if (null != mProduct && mProduct.isConnected) {
            val str = if (mProduct is Aircraft) "DJIAircraft" else "DJIHandHeld"
            if (null != mProduct.model) {
            } else {
            }
        } else {

        }
    }


}